http {
    lua_shared_dict oauth_limit 10m;

    server {
        listen 80;

        location /oauth/token {
            access_by_lua_block {
                local limit_store = ngx.shared.oauth_limit
                local ip = ngx.var.remote_addr
                local now = ngx.now()

                -- Basic WAF rules
                local headers = ngx.req.get_headers()
                local ua = headers["User-Agent"] or ""
                local args = ngx.req.get_uri_args()

                -- ðŸš« Block bad user agents
                if ua:lower():find("sqlmap") or ua:lower():find("curl") then
                    ngx.status = 403
                    ngx.say("Forbidden: suspicious user agent")
                    return ngx.exit(403)
                end

                -- ðŸš« Block suspicious query params
                for k, v in pairs(args) do
                    local val = tostring(v):lower()
                    if val:find("union") or val:find("<script>") or val:find(" or ") then
                        ngx.status = 403
                        ngx.say("Forbidden: malicious input detected")
                        return ngx.exit(403)
                    end
                end

                -- ðŸš« Block bad methods
                if ngx.req.get_method() ~= "POST" then
                    ngx.status = 405
                    ngx.say("Method Not Allowed")
                    return ngx.exit(405)
                end

                -- ðŸ§± Rate limiting (same as before)
                local ban_key = "ban:" .. ip
                local limit_key = "limit:" .. ip

                if limit_store:get(ban_key) then
                    ngx.status = 429
                    ngx.say("Too many requests - banned")
                    return ngx.exit(429)
                end

                local data = limit_store:get(limit_key)
                local reqs, start_time

                if data then
                    local parts = {}
                    for s in string.gmatch(data, "[^:]+") do
                        table.insert(parts, s)
                    end
                    start_time = tonumber(parts[1])
                    reqs = tonumber(parts[2])
                else
                    start_time = now
                    reqs = 0
                end

                if now - start_time < 60 then
                    reqs = reqs + 1
                    if reqs > 5 then
                        limit_store:set(ban_key, true, 300)
                        ngx.status = 429
                        ngx.say("Rate limit exceeded - banned")
                        return ngx.exit(429)
                    end
                else
                    start_time = now
                    reqs = 1
                end

                limit_store:set(limit_key, start_time .. ":" .. reqs, 60)
            }

            proxy_pass http://oauth_server_backend;
        }
    }
}




