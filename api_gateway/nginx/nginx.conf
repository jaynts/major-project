# Global directives
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 2048;
    use epoll;
    multi_accept on;
}

http {
    # Lua support (adjust path if needed)
    lua_package_path "/etc/nginx/lua/?.lua;;";
    lua_shared_dict my_cache 10m;

    # MIME types
    include       mime.types;
    default_type  application/octet-stream;

    # Logging
    access_log /var/log/nginx/access.log combined;

    # Performance tuning
    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Compression
    gzip on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    # Include dynamic conf files (from confd)
    include /etc/nginx/conf.d/*.conf;

    # Default server block
    server {
        listen 8081;
        server_name blog.site.com;

        # Lua init block (optional, for gateway logic)
        init_by_lua_block {
            -- Initialize shared data or libraries
            require("init")
        }

        location /healthz {
            access_log off;
            return 200 "OK\n";
        }

        location /api/users {
            content_by_lua_block {
                local http = require("resty.http")
                local httpc = http.new()
                local res, err = httpc:request_uri("http://localhost:3000/api/users", {
                    method = "GET",
                })
                if not res then
                    ngx.status = 502
                    ngx.say("Upstream error: ", err)
                    return
                end
                ngx.status = res.status
                ngx.say(res.body)
            }
        }

        location /api/products {
            proxy_pass http://localhost:3001;
        }

        location /static/ {
            root /var/www/html;
            index index.html;
        }

        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}
